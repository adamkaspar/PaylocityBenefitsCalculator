using Api.Dtos.Paycheck;
using Api.Models;
using Api.Repositories;
using Mapster;

namespace Api.Services;

public class PaycheckService(IEmployeesRepository employeesRepository) : IPaycheckService
{
    private const int NumberOfPaychecksPerYear = 26;

    public IEmployeesRepository employeesRepository = employeesRepository;

    public GetPaycheckDto? Get(int id, CancellationToken cancellationToken = default)
    {
        var paychecks = GetAll();
        var result = paychecks.FirstOrDefault(paycheck => paycheck.Id == id);

        return result;
    }

    public List<GetPaycheckDto> GetAll(CancellationToken cancellationToken = default)
    {
        var employees = employeesRepository.GetAll();
        var result = new List<GetPaycheckDto>();

        employees.ForEach(employee => result.AddRange(ComputePaychecks(employee).Adapt<List<GetPaycheckDto>>()));

        return result;
    }

    public List<GetPaycheckDto> GetByEmployeeId(int id, CancellationToken cancellationToken = default)
    {
        var employee = employeesRepository.Get(id);
        var result = new List<GetPaycheckDto>();

        if (employee != null)
        {
            result.AddRange(ComputePaychecks(employee).Adapt<List<GetPaycheckDto>>());
        }

        return result;
    }

    private List<Paycheck> ComputePaychecks(Employee employee, CancellationToken cancellationToken = default)
    {
        //employee annual salary
        var totalAmount = employee.Salary;
        //employees have a base cost of $1,000 per month (for benefits)
        totalAmount -= 1000 * 12;
        //each dependent represents an additional $600 cost per month (for benefits)
        totalAmount -= employee.Dependents.Count * 600 * 12;
        //employees that make more than $80,000 per year will incur an additional 2% of their yearly salary in benefits costs
        if (employee.Salary > 80000)
        {
            totalAmount -= employee.Salary * 0.02m;
        }
        //dependents that are over 50 years old will incur an additional $200 per month
        var dependantsOverFifty = employee.Dependents.Count(dependent => (new DateTime((DateTime.Now - dependent.DateOfBirth).Ticks).Year - 1) > 50);

        totalAmount -= dependantsOverFifty * 200 * 12;

        //26 paychecks per year with deductions spread as evenly as possible on each paycheck
        totalAmount /= NumberOfPaychecksPerYear;

        var result = new List<Paycheck>();

        for (var i = 1; i <= NumberOfPaychecksPerYear; i++)
        {
            var week = i * 2;

            result.Add(new Paycheck
            {
                Id = employee.Id * 1000 + week, //computation just for this example, in real application, Id should be generated by Db
                Employee = employee,
                Week = week,
                Year = DateTime.Now.Year,
                TotalAmount = totalAmount
            });
        }

        return result;
    }
}